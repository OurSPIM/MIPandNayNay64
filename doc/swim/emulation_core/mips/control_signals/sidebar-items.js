window.SIDEBAR_ITEMS = {"enum":[["AluControl","The output of the ALU control unit that directly controls the ALU."],["AluOp","This determines the operation sent to the ALU control unit."],["AluSrc","Determines the second source of the ALU."],["Branch","Determines if the datapath should consider branching."],["ImmShift","Determines the amount of bits to left-shift the immediate value before being passed to the ALU."],["Jump","Determines if the datapath should jump. This is an unconditional branch."],["MemRead","Determines if memory should be read."],["MemToReg","Determines, given [`RegWrite`] is set, what the source of a registerâ€™s new data will be."],["MemWrite","Determines if memory should be written to."],["MemWriteSrc","Determines, given that [`MemWrite`] is set, the source of the data will be written to memory."],["RegDst","Determines, given that [`RegWrite`] is set, which destination register to write to, which largely depends on the instruction format."],["RegWidth","Determines the amount of data to be sent or recieved from registers and the ALU. While all buses carrying information are 64 bits wide, some bits of the bus may be ignored in the case of this control signal."],["RegWrite","Determines if the register file should be written to."]],"mod":[["floating_point",""]],"struct":[["ControlSignals","Full collection of control signals."]]};